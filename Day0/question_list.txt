Day1: (Arrays)

Find the duplicate in an array of N integers.  DONE  with hashing without hashing
Sort an array of 0’s 1’s 2’s without using extra space or sorting algo  Attemped But NOT DONE using DUTCH FLAG ALGO
Repeat and Missing Number DONE
Merge two sorted Arrays without extra space
Kadane’s Algorithm  DONE / PRACTICE
Merge Overlapping Subintervals

Day2: (Arrays)

Set Matrix Zeros
Pascal Triangle
Next Permutation
Inversion of Array (Using Merge Sort)
Stock Buy and Sell
Rotate Matrix  

Day3: (Math)

Excel Column Number
Find n^x in log N
Count trailing zeros in factorial of a number
Find GCD in Log N
Grid Unique Paths
Go through Puzzles from GFG (Search on own)

Day4: (Hashing)

2 Sum problem
4 Sum problem
Longest Consecutive Sequence
Longest Subarray with 0 sum
Count number of subarrays with given XOR(this clears a lot of problems)
Longest substring without repeat

Day5: (LinkedList)

Reverse a LinkedList
Find middle of LinkedList
Merge two sorted Linked List
Remove N-th node from back of LinkedList
Delete a given Node when a node is given. (0(1) solution)
Add two numbers as LinkedList  

Day6:

Find intersection point of Y LinkedList
Check if a LinkedList is palindrome or not.
Reverse a LinkedList in groups.
Detect a cycle and removing loop(two different questions and same concept)
Flattening of a LinkedList
Rotate a LinkedList
Clone a Linked List with random and next pointer.


Day7: (2-pointer)

Merge two sorted LinkedLists
Find the starting point of the loop.
3 sum
Trapping rainwater
Remove Duplicate from Sorted array
Max continuous number of 1’s  

Day8: (Greedy)

N meeting in one room
Activity Selection  
Greedy algorithm to find minimum number of coins
Fractional Knapsack Problem
Minimum number of platforms required for a railway
Job sequencing Problem

Day9: (Backtracking)

N queens Problem
Sudoko
M coloring Problem
Rat in a Maze
Print all Permutations of a string/array
Word Break (print all ways)  

Day10:

Combination sum-1
Combination sum-2
Palindrome Partioning
Subset Sum-1
Subset Sum-2
K-th permutation Sequence

Day11: (Divide and Conquer)

1/N-th root of an integer (use binary search) (square root, cube root, ..)
Matrix Median
Find the element that appears once in sorted array, and rest element appears twice (Binary search)
Search element in a sorted and rotated array.
K-th element of two sorted arrays
Media of an array    

Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might ask)

Check if a number if a power of 2 or not in O(1)
Count total set bits
Divide Integers without / operator
Power Set (this is very important)
Find MSB in o(1)
Find square of a number without using multiplication or division operators.  
Day13: (Stack and Queue)

Implement Stack / Implement Queue
BFS
Implement Stack using Queue
Implement Queue using Stack
Check for balanced parentheses
Next Greater Element

Day14:

Next Smaller Element
LRU cache (vvvv. imp)
Largest rectangle in histogram
Sliding Window maximum
Implement Min Stack  
Rotten Orange (Using BFS)  

Day15: (String)

Reverse Words in a String
Longest Palindrome in a string
Roman Number to Integer and vice versa
Implement ATOI/STRSTR
Longest Common Prefix
Rabin Karp
Day16: (String)

Prefix Function/Z-Function
KMP algo
Minimum characters needed to be inserted in the beginning to make it palindromic.
Check for Anagrams
Count and Say
Compare version numbers

Day17: (Binary Tree)

Inorder Traversal (with recursion and without recursion)
Preorder Traversal (with recursion and without recursion)
Postorder Traversal (with recursion and without recursion)  
LeftView Of Binary Tree
Bottom View of Binary Tree
Top View of Binary Tree

Day18: (Binary Tree)

Level order Traversal / Level order traversal in spiral form
Height of a Binary Tree
Diameter of Binary Tree
Check if Binary tree is height balanced or not
LCA in Binary Tree
Check if two trees are identical or not

Day 19: (Binary Tree)

Maximum path sum
Construct Binary Tree from inorder and preorder
Construct Binary Tree from Inorder and Postorder
Symmetric Binary Tree
Flatten Binary Tree to LinkedList
Check if Binary Tree is mirror of itself or not  

Day 20: (Binary Search Tree)

Populate Next Right pointers of Tree
Search given Key in BST
Construct BST from given keys.
Check is a BT is BST or not  
Find LCA of two nodes in BST
Find the inorder predecessor/successor of a given Key in BST.

Day21: (BinarySearchTree)

Floor and Ceil in a BST
Find K-th smallest and K-th largest element in BST (2 different Questions)
Find a pair with a given sum in BST
BST iterator
Size of the largest BST in a Binary Tree
Serialize and deserialize Binary Tree

Day22: (Mixed Questions)

Binary Tree to Double Linked List
Find median in a stream of running integers.
K-th largest element in a stream.
Distinct numbers in Window.
K-th largest element in an unsorted array.
Flood-fill Algorithm

Day23: (Graph)

Clone a graph (Not that easy as it looks)
DFS
BFS
Detect A cycle in Undirected Graph/Directed Graph
Topo Sort
Number of islands (Do in Grid and Graph both)
Bipartite Check

Day24: (Graph)

SCC(using KosaRaju’s algo)
Djisktra’s Algorithm
Bellman Ford Algo
Floyd Warshall Algorithm  
MST using Prim’s Algo
MST using Kruskal’s Algo  

Day25: (Dynamic Programming)

Max Product Subarray
Longest Increasing Subsequence
Longest Common Subsequence
0-1 Knapsack
Edit Distance
Maximum sum increasing subsequence  
Matrix Chain Multiplication

Day26: (DP)

Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find the maximum path)
Coin change
Subset Sum
Rod Cutting
Egg Dropping
Word Break
Palindrome Partitioning (MCM Variation)
Day27:

Revise OS notes that you would have made during your sem
If not made notes, spend 2 or 3  days and make notes from Knowledge Gate.

Day28:

Revise DBMS notes that you would have made during your semesters.
If not made notes, spend 2 or 3  days and make notes from Knowledge Gate.

Day29:

Revise CN notes, that you would have made during your sem.
If not made notes, spend 2 or 3  days and make notes from Knowledge Gate.


Day30:

Make a note of how will your represent your projects, and prepare all questions related to tech which you have used in your projects. Prepare a note which you can say for 3-10 minutes when he asks you that say something about the project


# Preparation CP

REPOSITORIES SORTED BY LATEST COMMIT TIME:
Time_of_latest_commit    url     (primary_language, number_of_characters)
2018-06-27 23:07:38 https://github.com/EgorKulikov/yaal/tree/master/lib/main/net/egork  (Java, 8483941 characters)
2018-06-27 21:49:46 https://github.com/justcoding121/Advanced-Algorithms/tree/master/Advanced.Algorithms  (C#, 953570 characters)
2018-06-26 21:57:32 https://github.com/bqi343/USACO/tree/master/Implementations  (C++, 565860 characters)
2018-06-22 23:57:15 https://github.com/kth-competitive-programming/kactl  (C++, 159178 characters)
2018-06-17 14:23:55 https://github.com/psjava/psjava  (Java, 504344 characters)
2018-06-17 11:33:16 https://github.com/SPbSU3/algorithms/  (C++, 75052 characters)
2018-06-16 12:49:39 https://github.com/radoslav11/Coding-Library   (C++, 146974 characters)
2018-06-16 02:14:05 https://github.com/aalhour/C-Sharp-Algorithms  (C#, 902246 characters)
2018-06-11 19:46:52 https://github.com/raywenderlich/swift-algorithm-club  (Swift, 959643 characters)
2018-06-06 18:36:21 https://github.com/spaghetti-source/algorithm  (C++, 688476 characters)
2018-06-05 20:57:57 https://github.com/jakobkogler/Algorithm-DataStructures/  (C++, 110385 characters)
2018-06-01 09:42:39 https://github.com/indy256/codelibrary  (Java, 482416 characters)
2018-05-30 15:12:09 https://github.com/ngthanhtrung23/ACM_Notebook_new  (C++, 159022 characters)
2018-05-29 20:45:05 https://github.com/kunyavskiy/olymp-prewritten  (C++, 16340 characters)
2018-05-24 17:00:32 https://github.com/sslotin/algo  (C++, 22930 characters)
2018-05-07 21:31:10 https://github.com/jaehyunp/stanfordacm  (C++)
2018-05-03 14:18:30 https://github.com/phishman3579/java-algorithms-implementation  (Java, 1273421 characters)
2018-03-16 16:18:10 https://github.com/pathikrit/scalgos/tree/master/src/main/scala/com/github/pathikrit/scalgos  (Scala, 107585 characters)
2018-02-21 10:33:58 https://github.com/felipernb/algorithms.js  (JavaScript, 224732 characters)
2018-01-21 05:36:15 https://github.com/jainaman224/Algo_Ds_Notes  (C++, 154026 characters)
2017-11-25 19:18:59 https://github.com/EvgenyKarkan/EKAlgorithms  (Objective-C, 175393 characters)
2017-07-07 05:37:38 https://github.com/ADJA/algos  (C++, 141930 characters)
2017-05-22 21:16:09 https://github.com/bobogei81123/bcw_codebook  (C++, 3752109 characters)
2017-05-16 01:23:24 https://github.com/BrunoRB/algorithms.coffee  (CoffeeScript, 99607 characters)
2017-02-17 15:25:37 https://github.com/rampatra/Algorithms-and-Data-Structures-in-Java/tree/master/src/me/ramswaroop/common  (Java, 481406 characters)
2017-02-12 03:54:23 https://github.com/PetarV-/Algorithms  (C++, 198257 characters)
2017-01-17 10:43:28 https://github.com/stjepang/snippets  (C++, 33424 characters)
2016-10-30 16:21:53 https://github.com/prakhar1989/Algorithms  (Python, 89524 characters)
2016-06-18 06:59:47 https://github.com/t3nsor/codebook  (C++, 71787 characters)
2015-02-02 23:35:47 https://github.com/arnauddri/algorithms  (Go, 75069 characters)
2014-06-29 06:31:27 https://github.com/kunyavskiy/SPbSU4-Team-Notebook  (C++, 91579 characters)
Interestingly, some libraries were prepared by ACM ICPC world finalists. And others were written by mere enthusiasts like you and me!
Don’t be scared by the number of characters. Some repos also contain solutions to various programming contests. Some repos contain tests along with the code. Also, Java is naturally more verbose than other languages.
Speaking about languages, C++ is the most popular.
Distribution of repos by programming language:
– C++ 17
– Java 5
– C# 2
– JavaScript 1
– CoffeeScript 1
– Swift 1
– Python 1
– Objective-C 1
– Scala 1
– Go 1
